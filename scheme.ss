(define (not x) (if x #f #t))
(define (/= . a) (not (apply = a)))
(define (> a b) (< b a))
(define (caar x) (car (car x)))
(define (cdar x) (cdr (car x)))
(define (append x y)
  (if (null? x) y (cons (car x) (append (cdr x) y))))
(define (length x) (if (null? x) 0 (+ 1 (length (cdr x)))))
(define (unpack first . rest)
  (begin
    (define (pack-exps exps)
      (if (= 1 (length exps))
        (car exps)
        (cons 'begin exps)))
    (if (eq? 'else (car first))
      (pack-exps (cdr first))
      (list 'if (car first) (pack-exps (cdr first)) (apply unpack rest)))))
(define cond (macro (lambda clauses (apply unpack clauses))))


