(define (length x) (if (null? x) 0 (+ 1 (length (cdr x)))))
(length '(2 4 6))
(define (not x) (if x #f #t))
(define (/= . a) (not (apply = a)))
(define (> a b) (< b a))
(define (caar x) (car (car x)))
(define (cdar x) (cdr (car x)))
(define (cadr x) (car (cdr x)))
(define (append x y)
  (if (null? x) y (cons (car x) (append (cdr x) y))))
; not sure if fold-left is supposed to reverse a given list
(define (fold-left f z p)
  (if (null? p) z (fold-left f (f (car p) z) (cdr p))))
(define (fold-right f z p)
  (if (null? p) z (f (car p) (fold-right f z (cdr p)))))
(define (map-unary f p)
  (fold-right (lambda (head tail) (cons (f head) tail)) '() p))
(define (list-comp f lst)
  (if (null? lst) '() (cons (f (car lst)) (list-comp f (cdr lst)))))
(define (map f . is)
  (define heads (lambda (a) (list-comp car a)))
  (define tails (lambda (a) (list-comp cdr a)))
  (if (null? (car is)) '() (cons (apply f (heads is)) (apply map f (tails is)))))

