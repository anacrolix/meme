(__define define (macro (lambda (formals . body)
  (cons '__define 
        (if (pair? formals)
            (list (car formals) (list 'lambda (cdr formals) (cons 'begin body)))
            (list formals (cons 'begin body)))))))
(define defmacro (macro (lambda (formals . body)
  (cons '__define
        (if (pair? formals)
            (list (car formals) (list 'macro (list 'lambda (cdr formals) (cons 'begin body))))
            (list formals (list 'macro (cons 'begin body))))))))
(define quote __quote)
(define defined? __defined?)
(define undef __undef)
(define set! __set!)
(define (not x) (if x #f #t))
(define (/= . a) (not (apply = a)))
(define (> a b) (< b a))
(define (caar x) (car (car x)))
(define (cdar x) (cdr (car x)))
(define (append x y)
  (if (null? x) y (cons (car x) (append (cdr x) y))))
(define (length x) (if (null? x) 0 (+ 1 (length (cdr x)))))
(define (unpack first . rest)
  (begin
    (define (pack-exps exps)
      (if (= 1 (length exps))
        (car exps)
        (cons 'begin exps)))
    (if (eq? 'else (car first))
      (pack-exps (cdr first))
      (list 'if (car first) (pack-exps (cdr first)) (apply unpack rest)))))
(defmacro (cond . clauses) (apply unpack clauses))
(defmacro (define! formals body)
  (define sym (if (pair? formals) (car formals) formals))
  (list 'begin
        (list 'if (list 'defined? sym) (list 'undef sym))
        (list 'define formals body)))


