# About

meme is a minimal scheme. It's implemented in Go.

# Install

Build and install the latest meme like so:

	$ go get -u bitbucket.org/anacrolix/meme/cmd/meme

Don't forget to add the first GOPATH dir to your PATH.

Run the tests:

    $ cd "$GOPATH"/bitbucket.org/anacrolix/meme
    $ meme scheme.ss python.ss test-scheme.ss

scheme.ss implements higher level scheme primitives in terms of meme's builtins. python.ss is currently required for the combinations test.

# Benchmark

The current prefered benchmark is the Ackermann-Peter test. It resides in ackermann.ss in the top level source dir. Modify the parameters on the last line to taste.

	$ time meme scheme.ss ackermann.ss

Performance is similar to a naive Scala implementation of Scheme at time of writing and about 5x slower than the original C implementation of meme.

# Special forms

 (= a b)
    Evaluate `b` and store it in the current frame under the symbol `a`.
 (^ args... body)
    Captures the environment when invoked. Parameters are bound to the name of each `arg` in the evaluation of the `body` if called.
 (- a b...)
    The integers of `b` are each subtracted from the value of `a`.
 (< a b)
    `a` is numerically less than `b`.
 (? a b c)
    If `a` is not false, evaluate `b` else `c`.
 (# (a...) b)
    Returns a callable. Invoking it binds the arguments to each successive symbol in `a`. `b` is evaluated, and the returned expression is *again* evaluated, but this time in the macro callers environment.
 (* a...)
    Return the numerical product of all integers in `a`.
 (- a b...)
    If b is null, return `-a`

# Running under valgrind

Make sure to set G_SLICE=always-malloc, and possibly G_DEBUG=gc-friendly in the environment. See http://stackoverflow.com/questions/4254610/valgrind-reports-memory-possibly-lost-when-using-glib-data-types.

# TODO

 * Use libreadline.
 * Use GMP for numbers.
 * Reintroduce tail call optimization.
 * Possible optimization: reclaim empty envs if they're only referenced by other environments.
 * Ditch hash tables in environments (except perhaps the top level one?)
 * Cut back on unneeded loop detections.
 * Implement read and print.
